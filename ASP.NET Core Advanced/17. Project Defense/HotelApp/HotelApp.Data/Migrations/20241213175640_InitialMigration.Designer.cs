// <auto-generated />
using System;
using HotelApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelApp.Web.Data.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20241213175640_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HotelApp.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the booking.");

                    b.Property<DateTime>("CheckinDate")
                        .HasColumnType("datetime2")
                        .HasComment("The check-in date for the booking.");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime2")
                        .HasComment("The check-out date for the booking.");

                    b.Property<Guid>("GuestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the guest making the booking.");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the hotel the room belongs to.");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier of the room associated with the booking.");

                    b.Property<Guid?>("StaffId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the staff member managing the booking.");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The total price for the booking.");

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomId");

                    b.HasIndex("StaffId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c559e1e-cf69-465d-98b4-46e2b1c26da0"),
                            CheckinDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckoutDate = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuestId = new Guid("fae9ecb7-b323-476b-9e97-0a6caca0cf9c"),
                            HotelId = new Guid("b2752b87-da7b-4b9c-b4de-ac83558526a6"),
                            RoomId = new Guid("a323b2bd-a53e-4e90-b686-1d3f09953ba7"),
                            StaffId = new Guid("7069055e-ea25-4cda-84a4-b4ac6e992ac0"),
                            TotalPrice = 500.00m
                        },
                        new
                        {
                            Id = new Guid("f677d23e-2817-4172-bfa4-f65168d6223a"),
                            CheckinDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CheckoutDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GuestId = new Guid("4ca39a7b-8351-4348-8ece-f836ebcf0fcc"),
                            HotelId = new Guid("f2076ab0-6c3f-4107-a486-69493c927ad7"),
                            RoomId = new Guid("8272e2c2-3f52-47b9-bb8d-0d328a338ef9"),
                            StaffId = new Guid("4c9e04b1-6996-4190-8e8f-fd198515f19f"),
                            TotalPrice = 300.00m
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.Guest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the guest.");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address of the guest.");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("The date of birth of the guest.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The email address of the guest.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The first name of the guest.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The last name of the guest.");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The phone number of the guest.");

                    b.HasKey("Id");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fae9ecb7-b323-476b-9e97-0a6caca0cf9c"),
                            Address = "789 Pine St, Hilltown, Country",
                            DateOfBirth = new DateTime(1982, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alicejohnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Phone = "+1122334455"
                        },
                        new
                        {
                            Id = new Guid("4ca39a7b-8351-4348-8ece-f836ebcf0fcc"),
                            Address = "321 Birch Ln, Seaview, Country",
                            DateOfBirth = new DateTime(1995, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "michaelwilliams@example.com",
                            FirstName = "Michael",
                            LastName = "Williams",
                            Phone = "+2233445566"
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the hotel.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address of the hotel.");

                    b.Property<TimeSpan>("CheckinTime")
                        .HasColumnType("time")
                        .HasComment("The standard check-in time for the hotel.");

                    b.Property<TimeSpan>("CheckoutTime")
                        .HasColumnType("time")
                        .HasComment("The standard checkout time for the hotel.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The contact email address of the hotel.");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image URL for the hotel's picture.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The name of the hotel.");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The contact phone number of the hotel.");

                    b.Property<int>("Stars")
                        .HasColumnType("int")
                        .HasComment("The star rating of the hotel, ranging from 1 to 5.");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2752b87-da7b-4b9c-b4de-ac83558526a6"),
                            Address = "123 Main St, Cityville, Country",
                            CheckinTime = new TimeSpan(0, 14, 0, 0, 0),
                            CheckoutTime = new TimeSpan(0, 11, 0, 0, 0),
                            Email = "contact@grandhotel.com",
                            ImageURL = "/images/hotel1.jpg",
                            IsDeleted = false,
                            Name = "Grand Hotel",
                            Phone = "+1234567890",
                            Stars = 5
                        },
                        new
                        {
                            Id = new Guid("f2076ab0-6c3f-4107-a486-69493c927ad7"),
                            Address = "456 Ocean Ave, Seaside, Country",
                            CheckinTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckoutTime = new TimeSpan(0, 10, 0, 0, 0),
                            Email = "info@beachresort.com",
                            IsDeleted = false,
                            Name = "Beachside Resort",
                            Phone = "+0987654321",
                            Stars = 4
                        },
                        new
                        {
                            Id = new Guid("89f99082-15da-4328-98c6-9f6d90c08506"),
                            Address = "456 Beachside Blvd, Seaside Town, Country",
                            CheckinTime = new TimeSpan(0, 15, 0, 0, 0),
                            CheckoutTime = new TimeSpan(0, 12, 0, 0, 0),
                            Email = "info@oceanviewresort.com",
                            ImageURL = "/images/hotel3.jpg",
                            IsDeleted = false,
                            Name = "Oceanview Resort",
                            Phone = "+9876543210",
                            Stars = 4
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.HotelRoom", b =>
                {
                    b.Property<Guid?>("HotelId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the associated hotel.");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the associated room.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("HotelId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("HotelsRooms");

                    b.HasData(
                        new
                        {
                            HotelId = new Guid("b2752b87-da7b-4b9c-b4de-ac83558526a6"),
                            RoomId = new Guid("a323b2bd-a53e-4e90-b686-1d3f09953ba7"),
                            IsDeleted = false
                        },
                        new
                        {
                            HotelId = new Guid("b2752b87-da7b-4b9c-b4de-ac83558526a6"),
                            RoomId = new Guid("4c0ae8b9-1bd0-4571-8341-a2efc4c8c586"),
                            IsDeleted = false
                        },
                        new
                        {
                            HotelId = new Guid("f2076ab0-6c3f-4107-a486-69493c927ad7"),
                            RoomId = new Guid("8272e2c2-3f52-47b9-bb8d-0d328a338ef9"),
                            IsDeleted = false
                        },
                        new
                        {
                            HotelId = new Guid("f2076ab0-6c3f-4107-a486-69493c927ad7"),
                            RoomId = new Guid("a65a0b07-2385-4f19-9737-716677ead8d2"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the payment.");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount of the payment.");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the associated booking.");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasComment("The date the payment was made.");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The method of payment - Credit Card, Cash, Bank Wire Transfer.");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74c8165a-ad92-4523-b081-3746d1ce23dc"),
                            Amount = 500.00m,
                            BookingId = new Guid("6c559e1e-cf69-465d-98b4-46e2b1c26da0"),
                            PaymentDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Credit Card"
                        },
                        new
                        {
                            Id = new Guid("57008aa4-dd0f-4a11-9c73-4473799b0bee"),
                            Amount = 300.00m,
                            BookingId = new Guid("f677d23e-2817-4172-bfa4-f65168d6223a"),
                            PaymentDate = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentMethod = "Cash"
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the room.");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The image URL for the room's picture.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoomNumber")
                        .HasMaxLength(700)
                        .HasColumnType("int")
                        .HasComment("Unique number identifying the room within a hotel.");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the room's type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The status of the room - Available, Occupied, Cleaning");

                    b.HasKey("Id");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a323b2bd-a53e-4e90-b686-1d3f09953ba7"),
                            ImageURL = "/images/room1.png",
                            IsDeleted = false,
                            RoomNumber = 101,
                            RoomTypeId = new Guid("32ae3e42-270e-4c36-95ac-9efe748bd614"),
                            Status = "Available"
                        },
                        new
                        {
                            Id = new Guid("4c0ae8b9-1bd0-4571-8341-a2efc4c8c586"),
                            ImageURL = "/images/room2.png",
                            IsDeleted = false,
                            RoomNumber = 102,
                            RoomTypeId = new Guid("32ae3e42-270e-4c36-95ac-9efe748bd614"),
                            Status = "Available"
                        },
                        new
                        {
                            Id = new Guid("8272e2c2-3f52-47b9-bb8d-0d328a338ef9"),
                            IsDeleted = false,
                            RoomNumber = 201,
                            RoomTypeId = new Guid("98e23296-f423-42e3-9606-d8286e79bc54"),
                            Status = "Available"
                        },
                        new
                        {
                            Id = new Guid("a65a0b07-2385-4f19-9737-716677ead8d2"),
                            IsDeleted = false,
                            RoomNumber = 202,
                            RoomTypeId = new Guid("98e23296-f423-42e3-9606-d8286e79bc54"),
                            Status = "Available"
                        },
                        new
                        {
                            Id = new Guid("9fd1e1ee-6fae-4d51-a637-fcf24e1ede82"),
                            IsDeleted = false,
                            RoomNumber = 301,
                            RoomTypeId = new Guid("98e23296-f423-42e3-9606-d8286e79bc54"),
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.RoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the room type.");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("The maximum capacity of this room type.");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("A description of the room type, detailing features or amenities.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the room type - Single, Double, Suite.");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The nightly price for this type of room.");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32ae3e42-270e-4c36-95ac-9efe748bd614"),
                            Capacity = 1,
                            Description = "A single room for solo travelers.",
                            Name = "Single",
                            PricePerNight = 100.00m
                        },
                        new
                        {
                            Id = new Guid("98e23296-f423-42e3-9606-d8286e79bc54"),
                            Capacity = 2,
                            Description = "A double room for two guests.",
                            Name = "Double",
                            PricePerNight = 150.00m
                        },
                        new
                        {
                            Id = new Guid("37f1d7e0-ceb4-4704-8c53-ece9ec44b122"),
                            Capacity = 4,
                            Description = "A suite with multiple rooms and luxurious amenities.",
                            Name = "Suite",
                            PricePerNight = 200.00m
                        },
                        new
                        {
                            Id = new Guid("aec34658-7edc-4935-aa06-34869660e905"),
                            Capacity = 4,
                            Name = "Suite",
                            PricePerNight = 200.00m
                        });
                });

            modelBuilder.Entity("HotelApp.Data.Models.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Primary key and unique identifier for the staff member.");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("The birth date of the staff member.");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The email address of the staff member.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The first name of the staff member.");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2")
                        .HasComment("The hire date of the staff member.");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The identifier for the hotel where the staff member works.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The last name of the staff member.");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("The phone number of the staff member.");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The job position of the staff member.");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The salary of the staff member.");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7069055e-ea25-4cda-84a4-b4ac6e992ac0"),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@grandhotel.com",
                            FirstName = "John",
                            HireDate = new DateTime(2015, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("b2752b87-da7b-4b9c-b4de-ac83558526a6"),
                            LastName = "Doe",
                            Phone = "+1234567890",
                            Position = "Manager",
                            Salary = 5000.00m
                        },
                        new
                        {
                            Id = new Guid("4c9e04b1-6996-4190-8e8f-fd198515f19f"),
                            DateOfBirth = new DateTime(1990, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@beachresort.com",
                            FirstName = "Jane",
                            HireDate = new DateTime(2018, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HotelId = new Guid("f2076ab0-6c3f-4107-a486-69493c927ad7"),
                            LastName = "Smith",
                            Phone = "+0987654321",
                            Position = "Receptionist",
                            Salary = 2500.00m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelApp.Data.Models.Booking", b =>
                {
                    b.HasOne("HotelApp.Data.Models.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelApp.Data.Models.Hotel", "Hotel")
                        .WithMany("Bookings")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelApp.Data.Models.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelApp.Data.Models.Staff", "Staff")
                        .WithMany("ManagedBookings")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Guest");

                    b.Navigation("Hotel");

                    b.Navigation("Room");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HotelApp.Data.Models.HotelRoom", b =>
                {
                    b.HasOne("HotelApp.Data.Models.Hotel", "Hotel")
                        .WithMany("HotelRooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelApp.Data.Models.Room", "Room")
                        .WithMany("RoomHotels")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Payment", b =>
                {
                    b.HasOne("HotelApp.Data.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Room", b =>
                {
                    b.HasOne("HotelApp.Data.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Staff", b =>
                {
                    b.HasOne("HotelApp.Data.Models.Hotel", "Hotel")
                        .WithMany("Staff")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelApp.Data.Models.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Guest", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Hotel", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("HotelRooms");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Room", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("RoomHotels");
                });

            modelBuilder.Entity("HotelApp.Data.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelApp.Data.Models.Staff", b =>
                {
                    b.Navigation("ManagedBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
