// <auto-generated />
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231122151244_PrimitiveCollectionsDemo")]
    partial class PrimitiveCollectionsDemo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("The unique identifier for the person.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("The name of the person.");

                    b.ComplexProperty<Dictionary<string, object>>("CurrentAddress", "Infrastructure.Data.Models.Person.CurrentAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("current_address_city")
                                .HasComment("The city of the address.");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("current_address_country")
                                .HasComment("The country of the address.");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("current_address_line1")
                                .HasComment("The first line of the address.");

                            b1.Property<string>("Line2")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("current_address_line2")
                                .HasComment("The second line of the address.");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("current_address_post_code")
                                .HasComment("The post code of the address.");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PermanentAddress", "Infrastructure.Data.Models.Person.PermanentAddress#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("permanent_address_city")
                                .HasComment("The city of the address.");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("permanent_address_country")
                                .HasComment("The country of the address.");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("permanent_address_line1")
                                .HasComment("The first line of the address.");

                            b1.Property<string>("Line2")
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("permanent_address_line2")
                                .HasComment("The second line of the address.");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("permanent_address_post_code")
                                .HasComment("The post code of the address.");
                        });

                    b.HasKey("Id")
                        .HasName("pk_people");

                    b.ToTable("people", null, t =>
                        {
                            t.HasComment("A person.");
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Models.PrimitiveCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasComment("The unique identifier for the table.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Collection<DateTime>>("DateTimes")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]")
                        .HasColumnName("date_times")
                        .HasComment("Collection of timestamps.");

                    b.Property<DateOnly[]>("Dates")
                        .IsRequired()
                        .HasColumnType("date[]")
                        .HasColumnName("dates")
                        .HasComment("Collection of dates.");

                    b.Property<int[]>("Ints")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("ints")
                        .HasComment("Collection of integers.");

                    b.Property<string[]>("Strings")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("strings")
                        .HasComment("Collection of strings.");

                    b.HasKey("Id")
                        .HasName("pk_primitive_collections");

                    b.ToTable("primitive_collections", null, t =>
                        {
                            t.HasComment("Collections of primitive types.");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
